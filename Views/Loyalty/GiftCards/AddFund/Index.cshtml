@model dynamic

@{
    ViewBag.Title = "Gift Card Funds";
    Layout = ViewBag.SalesLayoutPath;
}
<style>
    .modal iframe {
        width: 100%;
        border: none;
        height: 700px;
    }
</style>
<div class="ui attached page segment" style="min-height: 100%; padding: 3em;">
    <div class="ui huge header">Gift Card Funds</div>
    <div class="ui divider"></div>
    <div class="ui basic buttons">
        <a id="AddNewButton" class="ui basic button" style="" href="/dashboard/loyalty/tasks/gift-cards/add-fund/entry">
            Add New
        </a>
        @*<a class="ui basic button" id="Import" href="ImportTransaction.mix">Import</a>*@
        <div class="ui icon top left pointing dropdown basic button" id="ExportDropDown" tabindex="0">
            <span>
                Export
            </span>
            <div class="menu" tabindex="-1">
                <div class="header">
                    Export This Document
                </div>
                <a class="item" href="javascript:void(0);" onclick="createDoc();">
                    <i class="file word outline blue icon"></i> Export to Doc
                </a>
                <a class="item" href="javascript:void(0);" onclick="createXls();">
                    <i class="file excel outline green icon"></i> Export to Excel
                </a>
                <a class="item" href="javascript:void(0);" onclick="createPDF();">
                    <i class="file pdf outline red icon"></i> Export to PDF
                </a>
            </div>
        </div>
        <a id="PrintButton" href="javascript:void(0);" onclick="print()" class="ui basic button">
            Print
        </a>
    </div>

    <div class="ui stackable form segment" id="Annotation" style="">
        <div class="eight fields">
            <div class="field">
                <input class="date"  data-persist placeholder="From" id="FromInputDate" title="From" type="date">
            </div>
            <div class="field">
                <input class="date"  data-persist placeholder="To" id="ToInputDate" title="To" type="date">
            </div>
            <div class="field">
                <input placeholder="TranCode" id="TranCodeInputText" title="TranCode" type="text">
            </div>
            <div class="field">
                <input placeholder="Customer" id="CustomerNameInputText" title="Customer" type="text">
            </div>
            <div class="field">
                <input placeholder="ReferenceNumber" id="ReferenceNumberInputText" title="ReferenceNumber" type="text">
            </div>
            <div class="field">
                <input placeholder="StatementReference" id="StatementReferenceInputText" title="StatementReference" type="text">
            </div>
            <div class="field">
                <input placeholder="PostedBy" id="PostedByInputText" title="PostedBy" type="text">
            </div>
            <div class="field">
                <input placeholder="Office" id="OfficeInputText" title="Office" type="text">
            </div>
        </div>
        <div class="eight fields">
            <div class="field">
                <input placeholder="Status" id="StatusInputText" title="Status" type="text">
            </div>
            <div class="field">
                <input placeholder="VerifiedBy" id="VerifiedByInputText" title="VerifiedBy" type="text">
            </div>
            <div class="field">
                <input placeholder="Reason" id="ReasonInputText" title="Reason" type="text">
            </div>
            <div class="field hidden">
                <input placeholder="UserId" id="UserIdInputText" title="UserId" type="text">
            </div>
            <div class="field hidden">
                <input placeholder="OfficeId" id="OfficeIdInputText" title="OfficeId" type="text">
            </div>
            <div class="field">
                <div class="ui green button" id="ShowButton">Show</div>
            </div>
        </div>


    </div>

    <div class="fluid width overflown section">
        <table id="SalesView" class="ui nowrap table segment">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Select</th>
                    <th>TranId</th>
                    <th>TranCode</th>
                    <th>Value Date</th>
                    <th>Book Date</th>
                    <th>Customer Name</th>
                    <th>Amount</th>
                    <th>Ref#</th>
                    <th>Statement Reference</th>
                    <th>Posted By</th>
                    <th>Office</th>
                    <th>Status</th>
                    <th>Verified By</th>
                    <th>Verified On</th>
                    <th>Reason</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div class="ui large advice modal">
    <i class="close icon"></i>
    <iframe></iframe>
</div>
<script>
    function displayTable(target, model) {
        target.find("tbody").html("");

        function getCell(text, isDate) {
            const cell = $("<td />");

            cell.text(text);

            if (isDate) {
                if ((text || "").trim()) {
                    cell.text(window.moment(new Date(text)).fromNow() || "");
                    cell.attr("title", text);
                };
            };

            return cell;
        };

        function getActionCell(tranId) {
            const cell = $("<td />");

            const checklistAnchor = $("<a title='Checklist Window'><i class='list icon'></i></a>");
            checklistAnchor.attr("href", "/dashboard/sales/tasks/entry/checklist/" + tranId);

            const journalAdviceAnchor = $("<a title='View Journal Advice'><i class='print icon'></i></a>");
            journalAdviceAnchor.attr("href", "javascript:void(0);");
            journalAdviceAnchor.attr("onclick", "showJournalAdvice(" + tranId + ");");

            const salesAdvice = $("<a title='View Sales Invoice'><i class='zoom icon'></i></a>");
            salesAdvice.attr("href", "javascript:void(0);");


            cell.append(checklistAnchor);
            cell.append(journalAdviceAnchor);
            cell.append(salesAdvice);
            return cell;
        };

        function getSelectionCell() {
            const cell = $("<td />");
            const checkbox = $("<div class='ui toggle checkbox'/>");
            const input = $("<input type='checkbox' />");
            const label = $("<label />");

            checkbox.append(input);
            checkbox.append(label);

            cell.append(checkbox);

            return cell;
        };

        $.each(model, function () {
            const item = this;

            const row = $("<tr />");

            row.append(getActionCell(item.TransactionMasterId));
            row.append(getSelectionCell(item.AccountMasterId));
            row.append(getCell(item.AccountMasterId));
            row.append(getCell(item.TransactionCode));
            row.append(getCell(item.ValueDate, true));
            row.append(getCell(item.BookDate, true));
            row.append(getCell(item.CustomerName));
            row.append(getCell(item.Amount));
            row.append(getCell(item.ReferenceNumber));
            row.append(getCell(item.StatementReference));
            row.append(getCell(item.PostedBy));
            row.append(getCell(item.OfficeName));
            row.append(getCell(item.Status));
            row.append(getCell(item.VerifiedBy));
            row.append(getCell(item.LastVerifiedOn, true));
            row.append(getCell(item.VerificationReason));

            target.find("tbody").append(row);
        });
    };
    function processQuery() {
        function getModel() {
            const model = window.serializeForm($("#Annotation"));

            const filters = [];

            filters.push(window.getAjaxColumnFilter("WHERE", "OfficeId", "int", window.FilterConditions.IsEqualTo, window.metaView.OfficeId));
            filters.push(window.getAjaxColumnFilter("WHERE", "ValueDate", "System.DateTime", window.FilterConditions.IsGreaterThanEqualTo, model.From));
            filters.push(window.getAjaxColumnFilter("WHERE", "ValueDate", "System.DateTime", window.FilterConditions.IsLessThanEqualTo, model.To));
            filters.push(window.getAjaxColumnFilter("WHERE", "TransactionCode", "string", window.FilterConditions.IsLike, model.TranCode));
            filters.push(window.getAjaxColumnFilter("WHERE", "CustomerName", "string", window.FilterConditions.IsLike, model.CustomerName));
            filters.push(window.getAjaxColumnFilter("WHERE", "ReferenceNumber", "string", window.FilterConditions.IsLike, model.ReferenceNumber));
            filters.push(window.getAjaxColumnFilter("WHERE", "StatementReference", "string", window.FilterConditions.IsLike, model.StatementReference));
            filters.push(window.getAjaxColumnFilter("WHERE", "PostedBy", "string", window.FilterConditions.IsLike, model.PostedBy));
            filters.push(window.getAjaxColumnFilter("WHERE", "OfficeName", "string", window.FilterConditions.IsLike, model.Office));
            filters.push(window.getAjaxColumnFilter("WHERE", "Status", "string", window.FilterConditions.IsLike, model.Status));
            filters.push(window.getAjaxColumnFilter("WHERE", "VerifiedBy", "string", window.FilterConditions.IsLike, model.VerifiedBy));
            filters.push(window.getAjaxColumnFilter("WHERE", "VerificationReason", "string", window.FilterConditions.IsLike, model.Reason));

            
            return filters;
        };

        function displayGrid(target) {
            function request(model) {
                const url = "/api/views/sales/gift-card-transaction-view/get-where/-1";
                const data = JSON.stringify(model);
                return window.getAjaxRequest(url, "POST", data);
            };

            const model = getModel();

            const ajax = request(model);

            ajax.success(function (response) {
                displayTable(target, response);
                target.removeClass("loading");
            });

            ajax.fail(function (xhr) {
                alert(JSON.stringify(xhr));
            });
        };

        const view = $("#SalesView").addClass("loading");

        displayGrid(view);
    };

    $("#ShowButton").off("click").on("click", function () {
        processQuery();
    });

    loadDatepicker();

    
    function showJournalAdvice(tranId) {
        $(".modal iframe").attr("src", "/dashboard/reports/source/Areas/MixERP.Finance/Reports/JournalEntry.xml?transaction_master_id=" + tranId);

        setTimeout(function () {
            $(".advice.modal")
                .modal('setting', 'transition', 'horizontal flip')
                .modal("show");

        }, 300);
    };

    $("#ReturnButton").click(function() {
        function getSelectedItem() {
            const selected = $("#SalesView").find("input:checked").first();

            if (selected.length) {
                const row = selected.parent().parent().parent();
                const id = row.find("td:nth-child(3)").html();
                return parseInt(id);
            };

            return 0;
        };

        const selected = getSelectedItem();
        if (selected) {
            const url = "/dashboard/sales/tasks/entry/new?Type=Return&TransactionMasterId=" + selected;
            document.location = url;
            return;
        };

        window.displayMessage("Please select an item from the grid.");
    });

    setTimeout(function () {
        processQuery();
    }, 1000);
</script>