@model dynamic

<div class="header items">
    <div class="two summary items">
        <div class="amount item">
            <div class="description">Amount</div>
            <div class="money">
                <span></span>
            </div>
        </div>
        <div class="count item">
            <div class="description">Count</div>
            <div class="money">

            </div>
        </div>
    </div>
</div>

<div class="tender info items">
    <div class="payment type container">
        <div data-payment-type="cash" class="two summary items">
            <div class="tender item">
                <div class="description">Cash Tender</div>
                <div class="control">
                    <input type="text" class="decimal" id="TenderInputText" />
                </div>
            </div>
            <div class="change item">
                <div class="description">Cash Change</div>
                <div class="control">
                    <input class="decimal" type="text" readonly="readonly" id="ChangeInputText" />
                </div>
            </div>
        </div>
        <div data-payment-type="credit" style="display: none;" class="one summary items">
            <div class="gift-card number item">
                <div class="description">Payment Term</div>
                <div class="control">
                    <select class="ui inverted fluid dropdown" id="PaymentTermSelect"></select>
                </div>
            </div>
        </div>
        <div data-payment-type="check" style="display: none;">
            <div class="two summary items">
                <div class="check amount item">
                    <div class="description">Check Amount</div>
                    <div class="control">
                        <input class="decimal" type="text" id="CheckAmountInputText" />
                    </div>
                </div>
                <div class="check bank name item">
                    <div class="description">Bank Name</div>
                    <div class="control">
                        <input type="text" id="BankNameInputText" />
                    </div>
                </div>
            </div>
            <div class="two summary items">
                <div class="check number item">
                    <div class="description">Check Number</div>
                    <div class="control">
                        <input type="text" id="CheckNumberInputText" />
                    </div>
                </div>
                <div class="check date item">
                    <div class="description">Check Date</div>
                    <div class="control">
                        <input type="text" class="date" id="CheckDateInputText" />
                    </div>
                </div>
            </div>
        </div>
        <div data-payment-type="gift-card" style="display: none;" class="two summary items">
            <div class="gift-card number item">
                <div class="description">Gift Card Number</div>
                <div class="control">
                    <div class="ui action fluid input">
                        <input id="GiftCardNumberInputText" required="" type="text">
                        <button class="ui icon blue button" onclick='$(".ui.gift.card.modal").modal("show");'>
                            <i class="search icon"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="gift-card balance item">
                <div class="description">Gift Card Balance</div>
                <div class="control">
                    <input class="decimal" type="text" readonly="readonly" id="GiftCardNumberBalanceInputText" />
                </div>
            </div>
        </div>
    </div>
    <div class="one summary items">
        <div class="customer item">
            <div class="description">Customer</div>
            <div class="control">
                @*<select id="CustomerSelect" class="ui search fluid inverted dropdown"></select>*@
                <div class="ui fluid customer search">
                    <div class="ui left icon fluid input">
                        <input id="CustomerInputText" class="prompt" type="text">
                        <i class="search grey icon"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="three summary items">
        <div class="coupon code item">
            <div class="description">Coupon Code</div>
            <div class="control">
                <input type="text" class="" id="CouponCodeInputText" />
            </div>
        </div>
        <div class="discount type item">
            <div class="description">Discount Type</div>
            <div class="control">
                <select class="ui inverted fluid dropdown" id="DiscountTypeSelect">
                    <option value="1">Rate</option>
                    <option value="2">Amount</option>
                </select>
            </div>
        </div>
        <div class="discount item">
            <div class="description">Discount</div>
            <div class="control">
                <input type="text" class="decimal" id="DiscountInputText" />
            </div>
        </div>
    </div>
    <div class="two summary items">
        <div class="value date item">
            <div class="description">Value Date</div>
            <div class="control">
                <input type="text" class="date" id="ValueDateInputText" />
            </div>
        </div>
        <div class="book date item">
            <div class="description">Book Date</div>
            <div class="control">
                <input type="text" class="date" id="BookDateInputText" />
            </div>
        </div>
    </div>
    <a class="show more anchor">Show More</a>
    <div class="more" style="display: none;">
        <div class="one summary items">
            <div class="cost center item">
                <div class="description">Cost Center</div>
                <div class="control">
                    <select class="ui inverted fluid dropdown" id="CostCenterSelect"></select>
                </div>
            </div>
        </div>
        <div class="one summary items">
            <div class="shipping company item">
                <div class="description">Shipper</div>
                <div class="control">
                    <select class="ui inverted fluid dropdown" id="ShipperSelect"></select>
                </div>
            </div>
        </div>
        <div class="two summary items">
            <div class="reference number item">
                <div class="description">Ref#</div>
                <div class="control">
                    <input type="text" id="ReferenceNumberInputText" />
                </div>
            </div>
            <div class="memo item">
                <div class="description">Memo</div>
                <div class="control">
                    <input type="text" id="StatementReferenceInputText" />
                </div>
            </div>
        </div>
        <a class="show less anchor">Show Less</a>
    </div>
    <div class="ui one column padded grid">
        <div class="column">
            <button class="ui big green button" id="CheckoutButton">Checkout</button>

            <div class="ticket panel">
                <iframe id="TicketIframe"></iframe>
                <button class="ui blue circular button" onclick="$('#TicketIframe').get(0).contentWindow.print();" id="PrintButton">Print</button>
                <button class="ui red  circular button" onclick="$('.ticket.panel').hide();">Hide</button>
            </div>
        </div>
    </div>
</div>

<script>
    function getLocalStorageKey(id) {
        return "posTab" + id;
    };

    function getModel() {
        function getDetails() {
            const items = $("#SalesItems .item");
            var model = [];

            $.each(items, function () {
                const el = $(this);
                const itemId = parseInt(el.attr("data-item-id"));
                const quantity = window.parseFloat2(el.find("input.quantity").val());
                const unitId = parseInt(el.find("select.unit").val());
                const price = window.parseFloat2(el.find("input.price").val() || 0);
                const discountRate = window.parseFloat2(el.find("input.discount").val() || 0);
                const discount = (price * quantity) * (discountRate / 100);
                const tax = window.parseFloat(el.find(".tax-amount").html() || 0);

                model.push({
                    StoreId: $("#StoreSelect").val(),
                    ItemId: itemId,
                    Quantity: quantity,
                    UnitId: unitId,
                    Price: price,
                    DiscountRate: discountRate,
                    Discount: discount,
                    Tax: tax
                });
            });

            return model;
        };

        //Cash
        const tender = window.parseFloat2($("#TenderInputText").val());
        const change = window.parseFloat2($("#ChangeInputText").val());

        //Credit
        const counterId = parseInt($("#CounterSelect").val()) || null;
        const paymentTermId = parseInt($("#PaymentTermSelect").val()) || null;

        //Check
        const checkAmount = window.parseFloat2($("#CheckAmountInputText").val()) || null;
        const bankName = $("#BankNameInputText").val();
        const checkNumber = $("#CheckNumberInputText").val();
        const checkDate = $("#CheckDateInputText").datepicker("getDate");

        //Gift Card
        const giftCardNumber = $("#GiftCardNumberInputText").val();


        //Discount Coupon
        const couponCode = $("#CouponCodeInputText").val();

        //Discount
        const discountType = $("#DiscountTypeSelect").val();
        const discount = window.parseFloat2($("#DiscountInputText").val());

        const valueDate = $("#ValueDateInputText").datepicker("getDate");
        const bookDate = $("#BookDateInputText").datepicker("getDate");
        const costCenterId = parseInt($("#CostCenterSelect").val()) || null;
        const referenceNumber = $("#ReferenceNumberInputText").val();
        const statementReference = $("#StatementReferenceInputText").val();
        const customerId = parseInt($("#CustomerInputText").attr("data-customer-id")) || null;
        const customerName = $("#CustomerInputText").val();
        const priceTypeId = $("#PriceTypeSelect").val();
        const shipperId = $("#ShipperSelect").val();
        const storeId = $("#StoreSelect").val();
        const details = getDetails();
        const quotationId = parseInt(window.getQueryStringByName("QuotationId")) || null;
        const orderId = parseInt(window.getQueryStringByName("OrderId")) || null;

        return {
            Tender: tender,
            Change: change,
            PaymentTermId: paymentTermId,
            CheckAmount: checkAmount,
            CheckBankName: bankName,
            CheckNumber: checkNumber,
            CheckDate: checkDate,
            CounterId: counterId,
            GiftCardNumber: giftCardNumber,
            CouponCode: couponCode,
            DiscountType: discountType,
            IsFlatDiscount: discountType === 2,
            Discount: discount,
            ValueDate: valueDate,
            BookDate: bookDate,
            CostCenterId: costCenterId,
            ReferenceNumber: referenceNumber,
            StatementReference: statementReference,
            CustomerId: customerId,
            CustomerName: customerName,
            PriceTypeId: priceTypeId,
            ShipperId: shipperId,
            StoreId: storeId,
            Details: details,
            SalesQuotationId: quotationId,
            SalesOrderId: orderId
        };
    };

    function getModelById(id) {
        const key = getLocalStorageKey(id);
        const item = localStorage.getItem(key);

        if (item) {
            return JSON.parse(item);
        };

        return null;
    };

    function removeModelById(id) {
        const key = getLocalStorageKey(id);
        localStorage.removeItem(key);
    };

    function clearState() {
        $.each(localStorage, function (key) {
            if (key.substr(0, 6) === "posTab") {
                localStorage.removeItem(key);
            };
        });
    };
    clearState();

    function getSelectedTabId() {
        const id = parseInt($(".tabs .selected.item:not(.new)").html());
        return id;
    };

    function loadState() {
        const id = getSelectedTabId();

        if (id) {
            loadModelById(id);
        };
    };

    function saveState() {
        const id = getSelectedTabId();

        if (!id) {
            window.displayMessage("Please select a tab");
            return;
        };

        const model = window.getModel();
        const key = getLocalStorageKey(id);
        localStorage.setItem(key, JSON.stringify(model));
    };

    function removeState() {
        const id = getSelectedTabId();

        if (id) {
            removeModelById(id);
        };
    };

    function loadModelData(model) {
        if (!model) {
            return;
        };

        window.clearScreen();


        $("#TenderInputText").val(model.Tender);
        $("#ChangeInputText").val(model.Change);
        $("#PaymentTermSelect").dropdown("set selected", model.PaymentTermId);
        $("#CounterSelect").dropdown("set selected", model.CounterId);

        $("#CheckAmountInputText").val(model.CheckAmount);
        $("#BankNameInputText").val(model.CheckBankName);
        $("#CheckNumberInputText").val(model.CheckNumber);

        if (model.CheckDate) {
            $("#CheckDateInputText").datepicker("setDate", new Date(model.CheckDate));
        };


        $("#GiftCardNumberInputText").val(model.GiftCardNumber).trigger("change");
        $("#CouponCodeInputText").val(model.CouponCode);
        $("#DiscountTypeSelect").dropdown("set selected", model.DiscountType);
        $("#DiscountInputText").val(model.Discount);

        if (model.ValueDate) {
            $("#ValueDateInputText").datepicker("setDate", new Date(model.ValueDate));
        };

        if (model.BookDate) {
            $("#BookDateInputText").datepicker("setDate", new Date(model.BookDate));
        };

        $("#CostCenterSelect").dropdown("set selected", model.CostCenterId);
        $("#ReferenceNumberInputText").val(model.ReferenceNumber);
        $("#StatementReferenceInputText").val(model.StatementReference);

        $("#CustomerInputText").attr("data-customer-id", model.CustomerId).val(model.CustomerCode);
        
        if (model.PriceTypeId) {
            $("#PriceTypeSelect").dropdown("set selected", model.PriceTypeId);
        };

        if (model.ShipperId) {
            $("#ShipperSelect").dropdown("set selected", model.ShipperId);
        };

        if (model.StoreId) {
            $("#StoreSelect").dropdown("set selected", model.StoreId);
        };


        $.each(model.Details, function () {
            const lineItem = this;

            const itemId = lineItem.ItemId;
            const selector = "#POSItemList .item[data-item-id=" + itemId + "]";
            $(selector).trigger("click");
        });
    };

    function loadModelById(id) {
        const model = getModelById(id);
        loadModelData(model);
    };
</script>
<script>
    function showTicket(id) {
        const url = "/dashboard/sales/ticket/" + id;

        $("#TicketIframe").attr("src", url);
        $(".ticket.panel").show();
    };

    function updateTenderInfo() {
        const total = window.parseFloat2($(".amount.item .money").text());
        const tender = window.parseFloat2($("#TenderInputText").val());

        var change = tender - total;

        if (change < 0) {
            change = "ERROR";
        };

        $("#ChangeInputText").val(change);
    };

    $("#TenderInputText").on("keyup", function () {
        updateTenderInfo();
    });

    $("#CheckoutButton").off("click").on("click", function () {
        function request(model) {
            const url = "/dashboard/sales/tasks/entry/new";
            const data = JSON.stringify(model);
            return window.getAjaxRequest(url, "POST", data);
        };

        function validate() {
            var transactionTotal = window.parseFloat2($("div.amount .money").text());
            var cashTender = window.parseFloat2($("#TenderInputText").val());
            var paymentTerm = parseInt($("#PaymentTermSelect").val()) || null;
            var checkAmount = window.parseFloat2($("#CheckAmountInputText").val());
            var bankName = $("#BankNameInputText").val();
            var checkDate = $("#CheckDateInputText").datepicker("getDate");
            var checkNumber = $("#CheckNumberInputText").val();
            var giftCardNumber = $("#GiftCardNumberInputText").val();
            var giftCardBalance = $("#GiftCardNumberBalanceInputText").val();

            if (cashTender >= transactionTotal) {
                //Cash Transaction

                $("#CheckAmountInputText").val("");
                $("#BankNameInputText").val("");
                $("#CheckDateInputText").val("");
                $("#CheckNumberInputText").val("");
                $("#PaymentTermSelect").dropdown("set selected", "Select");
                $("#GiftCardNumberInputText").val("");
                $("#GiftCardNumberBalanceInputText").val("");
                return true;
            };

            if (checkAmount >= transactionTotal) {
                //Paid via Check/Cheque
                if (!bankName) {
                    window.displayMessage("Please enter the bank name.");
                    return false;
                };

                if (!checkNumber) {
                    window.displayMessage("Please enter the check number.");
                    return false;
                };

                if (!checkDate) {
                    window.displayMessage("Please enter the check date.");
                    return false;
                };

                $("#TenderInputText").val("");
                $("#ChangeInputText").val("");
                $("#PaymentTermSelect").dropdown("set selected", "Select");
                $("#GiftCardNumberInputText").val("");
                $("#GiftCardNumberBalanceInputText").val("");


                return true;
            };

            if (giftCardBalance >= transactionTotal) {
                //Paid via Gift Card

                if (!giftCardNumber) {
                    window.displayMessage("Please enter the gift card number.");
                    return false;
                };

                $("#TenderInputText").val("");
                $("#ChangeInputText").val("");
                $("#CheckAmountInputText").val("");
                $("#BankNameInputText").val("");
                $("#CheckDateInputText").val("");
                $("#CheckNumberInputText").val("");
                $("#PaymentTermSelect").dropdown("set selected", "Select");

                return true;
            };

            //Credit transaction
            $("#TenderInputText").val("");
            $("#ChangeInputText").val("");
            $("#CheckAmountInputText").val("");
            $("#BankNameInputText").val("");
            $("#CheckDateInputText").val("");
            $("#CheckNumberInputText").val("");
            $("#GiftCardNumberInputText").val("");
            $("#GiftCardNumberBalanceInputText").val("");

            if (!paymentTerm) {
                window.displayMessage("Please select a payment term.");
                return false;
            };

            return true;
        };

        const isValid = validate();

        if (!isValid) {
            return;
        };

        const model = window.getModel();

        if (!model.Details.length) {
            window.displayMessage("Please select an item.");
            return;
        };

        const confirmed = confirm("Are you sure");

        if (!confirmed) {
            return;
        };


        $("#CheckoutButton").addClass("loading");

        const ajax = request(model);

        ajax.success(function (response) {
            const id = response;
            window.clearScreen();

            window.showTicket(id);
            $("#CheckoutButton").removeClass("loading");
        });

        ajax.fail(function (xhr) {
            $("#CheckoutButton").removeClass("loading");
            window.displayMessage(JSON.stringify(xhr));
        });
    });
</script>